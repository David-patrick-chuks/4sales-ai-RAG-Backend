version: '3.8'

services:
  ai-agent-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: ai-agent-api:latest
    container_name: ai-agent-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGO_URI=${MONGO_URI}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_KEY_1=${GEMINI_API_KEY_1}
      - GEMINI_API_KEY_2=${GEMINI_API_KEY_2}
      - GEMINI_API_KEY_3=${GEMINI_API_KEY_3}
      - GEMINI_API_KEY_4=${GEMINI_API_KEY_4}
      - GEMINI_API_KEY_5=${GEMINI_API_KEY_5}
      - GEMINI_API_KEY_6=${GEMINI_API_KEY_6}
      - GEMINI_API_KEY_7=${GEMINI_API_KEY_7}
      - GEMINI_API_KEY_8=${GEMINI_API_KEY_8}
      - GEMINI_API_KEY_9=${GEMINI_API_KEY_9}
      - GEMINI_API_KEY_10=${GEMINI_API_KEY_10}
      - AGENT_API_TOKEN=${AGENT_API_TOKEN}
      - SESSION_SECRET=${SESSION_SECRET}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB:-0}
      - SENTRY_DSN=${SENTRY_DSN}
      - TRUST_PROXY=${TRUST_PROXY:-1}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ai-agent-network
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: ai-agent-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - ai-agent-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: ai-agent-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - ai-agent-api
    restart: unless-stopped
    networks:
      - ai-agent-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'

# Optional: Add MongoDB for local development
# mongodb:
#   image: mongo:6.0
#   ports:
#     - "27017:27017"
#   environment:
#     - MONGO_INITDB_ROOT_USERNAME=admin
#     - MONGO_INITDB_ROOT_PASSWORD=password
#   volumes:
#     - mongodb_data:/data/db
#   networks:
#     - ai-agent-network

networks:
  ai-agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
#   mongodb_data: 